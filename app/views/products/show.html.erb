<!-- app/views/products/show.html.erb -->
<!DOCTYPE html>
<html lang="en">
<head>
  <title>Product Show Page</title>
  <meta name="csrf-token" content="<%= form_authenticity_token %>">
</head>
<body>
<h1>Product show page</h1>
<div class="flex justify-center gap-20 py-10">
  <div class="flex flex-wrap max-w-lg">
    <% @product.images.each do |image| %>
      <%= image_tag image, class: "w-auto h-64" %>
    <% end %>
  </div>

  <div class="flex flex-col items-start max-w-sm">
    <h1 class="font-bold text-4xl uppercase"><%= @product.name %></h1>
    <p class="text-2xl mt-4">$<%= (@product.price / 100.0).to_s %></p>
    <p class="text-md py-8"><%= @product.description %></p>
    <div class="my-8">
      <p class='uppercase text-lg'>Size/Color</p><br>
      <% @product.stocks.each do |stock| %>
        <% if stock.amount > 0 %>
          <button value="<%= stock.size %>" class="size-button bg-gray-200 text-gray-800 font-semibold py-2 px-4 rounded hover:bg-gray-300 focus:outline-none focus:ring-2 focus:ring-gray-500 focus:ring-opacity-50">
            <%= stock.size %>
          </button>
        <% else %>
          <button disabled value="<%= stock.size %>" class="disabled:bg-gray-400 bg-gray-200 text-gray-800 font-semibold py-2 px-4 rounded hover:bg-gray-300 focus:outline-none focus:ring-2 focus:ring-gray-500 focus:ring-opacity-50">
            <%= stock.size %>
          </button>
        <% end %>
      <% end %>
    </div>
    <div id="selected-size"></div>
    <button id="add-to-cart" class="inline-flex items-center justify-center px-5 py-3 border border-transparent font-medium rounded-md text-white bg-gray-600 hover:bg-gray-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-gray-500">
      Add To Cart
    </button>
<!--    <div class="mt-4">-->
<!--      <p class="text-lg font-bold">Bayesian Average Rating: <%#= @product.bayesian_average_rating %></p>-->
<!--    </div>-->
  </div>
</div>

<!-- Review Section -->
<div class="mt-8 max-w-4xl mx-auto bg-white p-6 rounded-lg shadow-lg">
  <h2 class="flex justify-center text-2xl font-bold mb-4">Customer Reviews</h2>
  <%= link_to 'Write a review', new_product_review_path(@product),  class: "flex items-center justify-center px-5 py-3 border border-transparent font-medium bg-blue-500 hover:bg-blue-600 text-white font-bold py-2 px-2 rounded w-auto" %>
  <% if @product.reviews.any? %>
    <% @product.reviews.each do |review| %>
      <br>
      <div class="bg-gray-50 p-4 rounded shadow mb-4">
        <div class="flex items-center mb-2">
          <% (1..5).each do |i| %>
            <% if i <= review.rating %>
              <i class="fas fa-star text-yellow-500"></i>
            <% else %>
              <i class="far fa-star text-gray-400"></i>
            <% end %>
          <% end %>
        </div>
        <p class="text-gray-800"><%= review.comment %></p>
        <p class="text-gray-600 text-sm mt-2">Reviewed by <%= review.user.name %> on <%= review.created_at.strftime("%B %d, %Y") %></p>
      </div>
    <% end %>
  <% else %>
    <p class="flex justify-center">No reviews yet.</p>
  <% end %>
</div>


<!-- Login Modal -->
<div id="loginModal" class="hidden fixed inset-0 bg-gray-600 bg-opacity-50 flex items-center justify-center">
  <div class="bg-white p-6 rounded-lg shadow-lg">
    <h2 class="text-xl font-bold mb-4">Login Required</h2>
    <p class="mb-4">You need to log in to add items to the cart.</p>
    <div class="flex space-x-4">
      <a href="<%= new_user_session_path %>" class="bg-blue-500 hover:bg-blue-600 text-white font-bold py-2 px-4 rounded">Login</a>
      <button id="closeModal" class="bg-gray-500 hover:bg-gray-600 text-white font-bold py-2 px-4 rounded">Close</button>
    </div>
  </div>
</div>

<!-- Out of Stock Modal -->
<div id="outOfStockModal" class="hidden fixed inset-0 bg-gray-600 bg-opacity-50 flex items-center justify-center">
  <div class="bg-white p-6 rounded-lg shadow-lg">
    <h2 class="text-xl font-bold mb-4">Out of Stock</h2>
    <p class="mb-4">This product is currently out of stock.</p>
    <button id="closeOutOfStockModal" class="bg-gray-500 hover:bg-gray-600 text-white font-bold py-2 px-4 rounded">Close</button>
  </div>
</div>

<!--Chckkout successful-->

<div id="checkoutModal" class="hidden fixed inset-0 bg-gray-600 bg-opacity-50 flex items-center justify-center">
  <div class="bg-white p-6 rounded-lg shadow-lg">
    <h2 class="text-xl font-bold mb-4">Checkout Successful</h2>
    <p class="mb-4">Your order has been confirmed</p>
    <button id="closeCheckoutModal" class="bg-gray-500 hover:bg-gray-600 text-white font-bold py-2 px-4 rounded">Close</button>
  </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', () => {
        let selectedSize = null;
        const sizeButtons = document.querySelectorAll('.size-button');
        const selectedSizeEl = document.getElementById('selected-size');
        const addToCartButton = document.getElementById('add-to-cart');
        const cartCount = document.getElementById('cart-count');
        const loginModal = document.getElementById('loginModal');
        const closeModal = document.getElementById('closeModal');
        const outOfStockModal = document.getElementById('outOfStockModal');
        const closeOutOfStockModal = document.getElementById('closeOutOfStockModal');
        const checkoutModal = document.getElementById('checkoutModal')
        const closeCheckoutModal = document.getElementById('closeCheckoutModal')

        closeModal.addEventListener('click', () => {
            loginModal.classList.add('hidden');
        });

        closeOutOfStockModal.addEventListener('click', () => {
            outOfStockModal.classList.add('hidden');
        });

        closeCheckoutModal.addEventListener('click' , ()=>{
            checkoutModal.classList.add('hidden')
            }
        )

        function updateCartCount() {
            fetch('/cart', {
                headers: {
                    'Content-Type': 'application/json',
                    'X-CSRF-Token': document.querySelector("[name='csrf-token']").content
                }
            })
              .then(response => response.json())
              .then(data => {
                  let cartItems = data.cart_items || [];
                  let cartItemCount = cartItems.reduce((total, item) => total + item.quantity, 0);
                  cartCount.innerText = cartItemCount;
              })
              .catch(error => console.error('Error:', error));
        }

        function checkAuthentication() {
            return fetch('/authenticated', {
                headers: {
                    'Content-Type': 'application/json',
                    'X-CSRF-Token': document.querySelector("[name='csrf-token']").content
                }
            })
              .then(response => response.json())
              .then(data => data.authenticated)
              .catch(error => console.error('Error:', error));
        }

        sizeButtons.forEach(button => {
            button.addEventListener('click', (e) => {
                selectedSize = e.target.value;
                selectedSizeEl.innerText = `Selected Size/Color: ${selectedSize}`;
            });
        });

        addToCartButton.addEventListener('click', () => {
            if (!selectedSize) {
                alert("Please select a size/color");
                return;
            }

            checkAuthentication().then(authenticated => {
                if (!authenticated) {
                    loginModal.classList.remove('hidden');
                } else {
                    const product = {
                        product_id: "<%= @product.id %>",
                        size: selectedSize
                    };

                    fetch('<%= add_item_cart_path %>', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'X-CSRF-Token': document.querySelector("[name='csrf-token']").content
                        },
                        body: JSON.stringify(product)
                    })
                      .then(response => response.json())
                      .then(data => {
                          if (data.success) {
                              console.log('Updated Cart:', data);
                              updateCartCount();
                              window.location.href = "<%= product_path(@product) %>";
                          } else {
                              if (data.message === 'Stock not available') {
                                  outOfStockModal.classList.remove('hidden');
                              } else {
                                  alert(data.message || 'Error adding product to cart');
                              }
                          }
                      })
                      .catch(error => console.error('Error:', error));
                }
            });
        });

        updateCartCount();
    });
</script>

</body>
</html>
